type Query {
  authentication: Authentication
  rooms(tenantAddress: String): [Room!]!
  room(id: ID!): Room!
  getContractInfo(id: ID!): ContractInfo
}

type ContractInfo {
  id: ID
  contractAddress: String
  landlord: String
  tenant: String
  rentalRate: Int
  billingPeriodDuration: Int
  billingsCount: Int

}

type Mutation {
  requestAuthentication(address: String!): String!
  authenticate(
    address: String!
    signedMessage: InputSignature!
  ): Authentication!
  getAccessToken(
    address: String!
  ): String!
  createRoom(room: InputRoom!): Room!
  editRoom(id: ID!, room: InputRoom!): Room!
  setRoomContractAddress(id: ID!, contractAddress: String): Room!
  setRoomPublicName(id: ID!, publicName: String): Room!
  removeRoom(id: ID!): Room!
}
# Authentication
type Authentication {
  address: String!
  isLandlord: Boolean!
}
# Rooms
type Room {
  id: ID!
  internalName: String!
  area: Float!
  location: String!
  contractAddress: String
  publicName: String
  isAvailableForRent: Boolean
  status: Int
  tenant: String
  rentStart: Int
  rentEnd: Int
  billingPeriod: Int
  rentalRate: Int

}
input InputRoom {
  internalName: String!
  area: Float!
  location: String!
}
input InputSignature {
  v: String!
  r: String!
  s: String!
}
